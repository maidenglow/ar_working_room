package com.eluon.pim.snmp.job.server;

import java.util.List;
import java.util.Map;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.eluon.pim.snmp.dao.ServerRepository;
import com.eluon.pim.snmp.service.SnmpServerService;
import com.eluon.pim.snmp.value.PimServerSecVO;
import com.eluon.pim.snmp.value.PimServerVO;
import com.google.gson.Gson;

public class ServerStatSec implements Job{
	private final Logger logger = LoggerFactory.getLogger(ServerStatSec.class);
	int n=0;
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		// DAO 객체 생성
		
//		System.out.println("SEC start");
		ServerRepository repo = new ServerRepository();
		List<PimServerVO> serverList = null;

		try {
			// 서버 목록 조회
			serverList = repo.getServerList();
		} catch (Exception e) {
			//TODO: DB 예외 처리
			e.printStackTrace();
		}
		
		//logger.error(" ------------ START --------------");
		for(PimServerVO target : serverList){
			SnmpServerService service = new SnmpServerService(target.getServerIP());
			
			PimServerVO updateParam = new PimServerVO();
			PimServerSecVO insertParam = new PimServerSecVO();
			//logger.error(" *** {} SNMP Complete", n);
			try {
				
				Map<String, Object> cpu = service.getCpuInfo();
				Map<String, Object> nic = service.getNicInfo();
				Map<String, Float> storage = service.getStorageInfo();
				String currentNicUsage = new Gson().toJson(nic.get("nicUsage"));
				
				
				// Server_Stat table update Param 설정
				updateParam.setServerId( target.getServerId() );
				updateParam.setCpuInfo( cpu.get("cpuInfo").toString() );
				updateParam.setCpuUsage( new Gson().toJson(cpu.get("cpuUsage")) );
				updateParam.setHddTotal( storage.get("hddTotal") );
				updateParam.setHddUsage( storage.get("hddUsage") );
				updateParam.setMemTotal( storage.get("memTotal") );
				updateParam.setMemUsage( storage.get("memUsage") );
				updateParam.setNicInfo( new Gson().toJson(nic.get("nicInfo")) );
				updateParam.setNicUsage( currentNicUsage );
				updateParam.setStatus(1);
		
				
				// server_stat_10s table insert param 설정
				insertParam.setServerId( target.getServerId() );
				insertParam.setCpuUsage( new Gson().toJson(cpu.get("cpuUsage")) );
				insertParam.setHddTotal( storage.get("hddTotal") );
				insertParam.setHddUsage( storage.get("hddUsage") );
				insertParam.setMemTotal( storage.get("memTotal") );
				insertParam.setMemUsage( storage.get("memUsage") );
				insertParam.setNicUsage( currentNicUsage );
				
				
				
				
			} catch (Exception e) {
				//TODO: SNMP 예외 처리
				updateParam.setStatus(0);
			}
			
			try {
				// 상테 업데이트
				repo.updateServerInfo(updateParam);
				//logger.error(" *** {} SERVER_INFO Update Complete", n);

				// 사용량 insert 상태가 이상이 없는 경우에만 insert
				if(updateParam.getStatus() == 1){
					repo.insertServerSec(insertParam);
					//logger.error(" *** {} SERVER_INFO Insert Complete server_info_no={}, ", 
					//		n, insertParam.getServerId());
				}
				
			} catch (Exception e) {
				//TODO: DB 예외 처리
				e.printStackTrace();
				System.out.println(target.getServerId() + " DB UPDATE ERROR =======================");
			}
			n++;
		}
		//logger.error(" ------------ END --------------");

	}

}
