package com.eluon.pim.snmp;

import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.quartz.CronTrigger;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;

import com.eluon.pim.snmp.job.ServerInfoUpdate;
import com.eluon.pim.snmp.job.ServerStatMin;

/**
 * Hello world!
 *
 */
public class App 
{
	public static ConcurrentHashMap<String, Object> serverData;
	public static ConcurrentHashMap<String, Object> swichData;
	
	public App(){
		serverData = new ConcurrentHashMap<>();
		swichData = new ConcurrentHashMap<>();
	}
	
	public static void main( String[] args )throws Exception{
		
		App app = new App();
		Configuration property = new PropertiesConfiguration("property/schedule.properties");
		
		app.serverSchedule(property);
		

	}
	
	
	public void serverSchedule(Configuration prop) throws Exception{
		
		String infoCron = prop.getString("schedule.server.info");
		String statMinCon = prop.getString("schedule.server.stat.min");
		String statHrCon = prop.getString("schedule.server.stat.hour");
		String statDayCon = prop.getString("schedule.server.stat.day");
		
		
		
		SchedulerFactory schedFact;
		Scheduler sched;


		schedFact = new StdSchedulerFactory();
		sched = schedFact.getScheduler();
		sched.start();
		
		//////////////////////////////////////////////////////////////////
		JobDetail infoJob= new JobDetail("infoJob","group1", ServerInfoUpdate.class);
		CronTrigger infoTrigger = new CronTrigger("infoTrigger","group1", infoCron);
		sched.scheduleJob(infoJob, infoTrigger);


		/////////////////////////////////////////////////////////////////
		JobDetail minStatJob = new JobDetail("minStatJob","group2", ServerStatMin.class);
		CronTrigger minStatTrigger = new CronTrigger("minStatTrigger","group2", statMinCon);
		sched.scheduleJob(minStatJob, minStatTrigger);
	}
}
