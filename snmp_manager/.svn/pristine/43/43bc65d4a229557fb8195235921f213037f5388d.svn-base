package com.eluon.pim.snmp.util;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.StringUtils;
import org.json.JSONObject;

import com.eluon.pim.snmp.service.SnmpCommonService;
import com.eluon.pim.snmp.value.PimServerStatVO;
import com.eluon.pim.snmp.value.PimServerVO;

public class SnmpServerBackup extends SnmpCommonService{

	//	private String oidMemInfo;
	//	private String oidHddInfo;
	//	private String oidNicInfo;
	//	private String oidNicStatus;
	//	private String oidNicUp;
	//	private String oidNicDown;

	//cpu device
	private String oidDeviceList;
	//cpu type
	private String oidTypelist;
	//cpu info
	private String oidCpuInfo;
	//cpu usage
	private String oidCpuUsage;
	//cpu type
	private String oidCpuType;

	//storage 
	private String oidStorageType;
	//storage unit
	private String oidStorageUnit;
	//storage total size
	private String oidStorageSize;
	//storage usage size
	private String oidStorageUsage;
	//storage memory type (hrStorageRam)
	private String oidMemType;
	//storage HDD type (hrStorageFixedDisk)
	private String oidHddType;

	//Nic
	//	private String oidNicCount;
	private String oidNicDesc;
	private String oidNicStatus;

	public SnmpServerBackup(){

		try {

			Configuration config = new PropertiesConfiguration("property/snmp.properties");


			// OID 설정
			// CPU 관련
			oidDeviceList = config.getString("oid.server.cpu.device");
			oidTypelist = config.getString("oid.server.cpu.type");
			oidCpuInfo = config.getString("oid.server.cpu.info");
			oidCpuUsage = config.getString("oid.server.cpu.usage");
			oidCpuType = config.getString("oid.server.cpu.type.num");

			// Storage 관련
			oidStorageType = config.getString("oid.server.storage.type");
			oidStorageUnit = config.getString("oid.server.storage.unit");
			oidStorageSize = config.getString("oid.server.storage.size");
			oidStorageUsage = config.getString("oid.server.storage.usage");

			//HOST-RESOURCES-TYPES::hrStorageRam
			oidMemType = config.getString("oid.server.storage.type.mem");
			//HOST-RESOURCES-TYPES:: hrStorageFixedDisk
			oidHddType = config.getString("oid.server.storage.type.hdd");

			//			oidNicCount = config.getString("oid.server.nic.count");
			oidNicDesc = config.getString("oid.server.nic.desc");
			oidNicStatus = config.getString("oid.server.nic.status");

		} catch (Exception e) {
			e.printStackTrace();
			// TODO : 로그 처리 요망
			System.out.println(e.getMessage());
		}


	}

	public void getNicInfo(PimServerVO param){
		//		NIC Count 조회가 필요 한가?
		//		Map<String, String> count =  getResultMap(oidNicCount);
		List<String> nicInfo = new ArrayList<>();
		Map<String, String> desc =  getResultMap(oidNicDesc);
		Map<String, String> status =  getResultMap(oidNicStatus);
		String result = "";

		for(String key : desc.keySet()){
			String statusStr = status.get(key).equals("1") ? "on" : "off";
			//			nicInfo.put(desc.get(key), statusStr);
			nicInfo.add(desc.get(key)+":"+statusStr);
		}

		//불필요 Loop....
		for(int i=0;i<nicInfo.size();i++){
			if(i>0) result += ", ";
			result += nicInfo.get(i);
		}

		System.out.println("Nic info : " + result);
		System.out.println("===================================================");

		System.out.println();
	}

	public void getStorageInfo(PimServerVO param){
		// Storage type 조회
		Map<String, String> type =  getResultMap(oidStorageType);
		// Storage Unit 조회
		Map<String, String> unit =  getResultMap(oidStorageUnit);
		// Storage 전체 크기 조회
		Map<String, String> size =  getResultMap(oidStorageSize);
		// Storage 사용량 조회
		Map<String, String> usage =  getResultMap(oidStorageUsage);

		//Memory type device id  목록
		List<String> memIdList = new ArrayList<>();
		//HDD type device id  목록
		List<String> hddIdList = new ArrayList<>();

		// 최종 결과
		float memTotal = 0;
		float memUsage = 0;

		float hddTotal = 0;
		float hddUsage = 0;

		// Storage 목록 중 memory 타입과 hdd 타입을 구별
		for(String key : type.keySet()){
			String oidType = type.get(key);
			if(StringUtils.substring(oidType, oidType.length()-1).equals(oidMemType)){
				memIdList.add(key);
			}
			if(StringUtils.substring(oidType, oidType.length()-1).equals(oidHddType)){
				hddIdList.add(key);
			}
		}

		//Memory 전체 크기 / 사용량 계산을 위한 Loop
		for(String key : memIdList){
			long tempUnit = Long.parseLong(unit.get(key));
			long tempSize = Long.parseLong(size.get(key));
			long tempUsage = Long.parseLong(usage.get(key));


			memTotal += (tempUnit * tempSize) /  1073741824.0;
			memUsage += (tempUnit * tempUsage) /  1073741824.0;
		}


		//HDD 전체 크기 / 사용량 계산을 위한 Loop
		for(String key : hddIdList){

			long tempUnit = Long.parseLong(unit.get(key));
			long tempSize = Long.parseLong(size.get(key));
			long tempUsage = Long.parseLong(usage.get(key));

			hddTotal += (tempUnit * tempSize) /  1073741824.0;
			hddUsage += (tempUnit * tempUsage) /  1073741824.0;
		}

		System.out.println("Memory : "+String.format("%.2f", memTotal) + "GB / "+String.format("%.2f", memUsage)+"GB");
		System.out.println("HDD : "+String.format("%.2f", hddTotal)+ "GB / "+String.format("%.2f", hddUsage)+"GB");

	}


	public void getCpuInfo(PimServerVO param){
		// snmp device 목록 조회
		Map<String, String> device =  getResultMap(oidDeviceList);
		// snmp device type 조회
		Map<String, String> type =  getResultMap(oidTypelist);
		// snmp device 정보 조회
		Map<String, String> info =  getResultMap(oidCpuInfo);
		// snmp cpu 시용량 정보 조회
		Map<String, String> usage =  getResultMap(oidCpuUsage);

		// cpu core device id 목록
		List<String> coreList = new ArrayList<>();
		// cpu 정보 || key : cpu info , value core count
		Map<String, Integer> coreInfo = new HashMap<>();


		String cpuInfo = "";
		String cpuUsage = "";

		// Device List를 기준으로 Type이 3인 목록 추출 loop
		for(String key : device.keySet()){
			String oidType = type.get(key);
			if(StringUtils.substring(oidType, oidType.length()-1).equals(oidCpuType)){
				coreList.add(key);
			}
		}

		// 추출한 core 정보 추출 (Core 계수 / Core Info)
		// 
		for(int i=0; i<coreList.size(); i++){

			String key = coreList.get(i);
			// 코어 정보 추출
			String tempCore = info.get(key);
			if(coreInfo.containsKey(tempCore)){
				coreInfo.put(tempCore, coreInfo.get(tempCore)+1);
			}else{
				coreInfo.put(tempCore, 1);
			}


			if(i > 0)  cpuUsage += ", ";
			// 사용량 정보 추출
			cpuUsage += i+":"+usage.get(key);
		}

		for(String key : coreInfo.keySet()){
			cpuInfo += key + " | " + " | " + coreInfo.get(key);
		}
		System.out.println("===================================================");
		System.out.println(cpuInfo);
		System.out.println(cpuUsage);
	}


	public PimServerVO updateServer(int serverId, String ipAddress){
		this.setIpAddress(ipAddress);

		PimServerVO result = new PimServerVO();
		result.setServerId(serverId);

		getCpuInfo(result);
		getStorageInfo(result);
		getNicInfo(result);

		// TODO 예외에 대한 처리 필요 
		result.setStatus(1);

		Date now = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		result.setStatusDate(format.format(now));

		return result;
	}

}
