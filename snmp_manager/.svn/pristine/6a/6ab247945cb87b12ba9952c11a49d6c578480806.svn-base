package com.eluon.pim.snmp.job;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.eluon.pim.snmp.App;
import com.eluon.pim.snmp.dao.ServerRepository;
import com.eluon.pim.snmp.service.SnmpServerService;
import com.eluon.pim.snmp.value.PimServerVO;
import com.google.gson.Gson;

public class ServerInfoUpdate implements Job{

	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		// DAO 객체 생성
		ServerRepository repo = new ServerRepository();
		List<PimServerVO> serverList = null;
		Date now = new Date();
		SimpleDateFormat dbForm = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat valueForm = new SimpleDateFormat("HHmm");

		try {
			// 서버 목록 조회
			serverList = repo.getServerList();
		} catch (Exception e) {
			//TODO: DB 예외 처리
			e.printStackTrace();
		}
		
		System.out.println("============== Start =======================");
		for(PimServerVO target : serverList){
			SnmpServerService service = new SnmpServerService(target.getServerIP());
			
			PimServerVO updateParam = new PimServerVO();
			
			try {
				
				Map<String, Object> cpu = service.getCpuInfo();
				Map<String, String> nic = service.getNicInfo();
				Map<String, Float> storage = service.getStorageInfo();
				
				// Param 설정
				updateParam.setServerId( target.getServerId() );
				updateParam.setCpuInfo( cpu.get("cpuInfo").toString() );
				updateParam.setCpuUsage( new Gson().toJson(cpu.get("cpuUsage")) );
				updateParam.setHddTotal( storage.get("hddTotal") );
				updateParam.setHddUsage( storage.get("hddUsage") );
				updateParam.setMemTotal( storage.get("memTotal") );
				updateParam.setMemUsage( storage.get("memUsage") );
				updateParam.setNicInfo( new Gson().toJson(nic) );
				updateParam.setStatus(1);
			} catch (Exception e) {
				//TODO: SNMP 예외 처리
				updateParam.setStatus(0);
			}
			
			
			updateParam.setStatusDate(dbForm.format(now));
			
			
			System.out.println(target.getServerId() + " DB UPDATE Start =======================");
			try {
				
				System.out.println(updateParam.toString());
				repo.updateServerInfo(updateParam);
				System.out.println(target.getServerId() + " DB UPDATE END =======================");
				
				
				App.serverData.put("valueForm",updateParam);
				
			} catch (Exception e) {
				//TODO: DB 예외 처리
				e.printStackTrace();
				System.out.println(target.getServerId() + " DB UPDATE ERROR =======================");
			}
		}
		
		
		System.out.println("============== END =======================");
		System.out.println();
	}

}
