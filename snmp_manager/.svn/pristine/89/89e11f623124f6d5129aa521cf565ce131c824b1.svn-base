package com.eluon.pim.snmp.service;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.util.DefaultPDUFactory;
import org.snmp4j.util.TreeEvent;
import org.snmp4j.util.TreeUtils;

public class SnmpCommonService {

	private static SnmpCommonService snmpService;

	private static Snmp snmp;
	private static TransportMapping<?> transport;
	private static CommunityTarget target; 

	private static final Logger logger = LoggerFactory.getLogger(SnmpCommonService.class);

	
	private SnmpCommonService(){

		// 초기화
		if(snmp == null){
			// SNMP 객체 생성
			try {
				transport = new DefaultUdpTransportMapping();
				snmp = new Snmp(transport);
				transport.listen();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		if(target == null){
			target = new CommunityTarget();
			target.setCommunity(new OctetString("public"));
			target.setRetries(2);
			target.setTimeout(1500);
			target.setVersion(SnmpConstants.version2c);
		}
	}

	private static synchronized SnmpCommonService getInstance(){
		if(snmpService == null){
			snmpService = new SnmpCommonService();
		}
		return snmpService;
	}


	private Snmp getSnmp() {
		return snmp;
	}


	private CommunityTarget getTarget(String serverIp){

		Address targetAddress = GenericAddress.parse(serverIp);
		target.setAddress(targetAddress);
		return target;
	}

	public static Map<String,String> getResultMap(String serverIp, String oid) throws Exception{
		Map<String,String> result = new HashMap<String, String>();

		SnmpCommonService snmpService = getInstance();
		TreeUtils treeUtils = new TreeUtils(snmpService.getSnmp(), new DefaultPDUFactory(PDU.GETNEXT));
		List<TreeEvent> events = treeUtils.getSubtree(snmpService.getTarget(serverIp), new OID(oid));

		for (TreeEvent event : events) {
			if (!event.isError()) { 
				VariableBinding[] varBindings = event.getVariableBindings(); 

				for (VariableBinding varBinding : varBindings) { 
					varBinding.toValueString(); 
					result.put(varBinding.getOid().toString().split(oid+".")[1], varBinding.toValueString());
				}
			}else{
				logger.error("Snmp get Fail / target Ip:" +  serverIp);
				throw new Exception();
			}
		}
		return result;
	}
}
