package com.eluon.pim.snmp.job.server;

import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.eluon.pim.snmp.dao.ServerRepository;
import com.eluon.pim.snmp.value.PimServerSecVO;
import com.eluon.pim.snmp.value.PimServerStatVO;
import com.eluon.pim.snmp.value.PimServerVO;
import com.google.gson.Gson;

public class ServerStatMin implements Job{

	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		// DAO 객체 생성
		ServerRepository repo = new ServerRepository();
		
		try {
			List<PimServerVO> serverList = repo.getServerList();
			
			
			for(PimServerVO target : serverList){
				
				int targetId = target.getServerId();
				List<PimServerSecVO> secData = repo.getServerStatSec(targetId);
				
				PimServerStatVO insertParam =  getMinStatData(secData);
				insertParam.setServerId(targetId);
				insertParam.setStatType(1);
				System.out.println("================================ Min ================================");
				System.out.println(insertParam.toString());
				System.out.println("================================ Min ================================");
				
				repo.insertServerStat(insertParam);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("unchecked")
	public static PimServerStatVO getMinStatData(List<PimServerSecVO> list){
		PimServerStatVO result = new PimServerStatVO();
		float totalMemUsage = 0;
		float memPeak = 0;
		float totalHddUsage = 0;
		float hddPeak = 0;
		Map<String, Double> cpuAvg = new HashMap<>();
		Map<String, Double> cpuPeak = new HashMap<>();
		
		for(PimServerSecVO temp : list){
			// Hdd peak / usage total 연산
			totalHddUsage += temp.getHddUsage();
			hddPeak = hddPeak < temp.getHddUsage() ? temp.getHddUsage() : hddPeak;
			
			// Memory peak / usage total 연산
			memPeak = memPeak< temp.getMemUsage() ? temp.getMemUsage() : memPeak;
			totalMemUsage += temp.getMemUsage();
			
			// CPU usage total 연산
			Map<String, Double>tempCpu =  new Gson().fromJson(temp.getCpuUsage(), Map.class);
			
			for(String key : tempCpu.keySet()){
				if(cpuAvg.containsKey(key)){
					cpuAvg.put(key, cpuAvg.get(key) + tempCpu.get(key));
					
					// Peak 연산
					if (cpuPeak.get(key) < tempCpu.get(key)){
						cpuPeak.put(key,tempCpu.get(key));
					}
					
				}else{
					cpuAvg.put(key,tempCpu.get(key));
					cpuPeak.put(key,tempCpu.get(key));
				}
			}
			
			System.out.println(temp.toString());
		}
		
		// CPU AVG 연산
		for(String key : cpuAvg.keySet()){
			DecimalFormat form = new DecimalFormat("#.##");
			double avg = Double.parseDouble(form.format( cpuAvg.get(key) / list.size() ));  

			cpuAvg.put(key, avg);
		}
		
		
		// Nic 사용량 연산
		Map<String, String> nicFirst = new Gson().fromJson( list.get(0).getNicUsage(), Map.class);
		Map<String, String> nicLast = new Gson().fromJson( list.get(list.size()-1).getNicUsage(), Map.class);
		Map<String, String> nicUsage = new HashMap<>();
		
		for(String key : nicFirst.keySet()){
			
			String fnic = nicFirst.get(key);
			String lnic = nicLast.get(key);
			long fnicRx = 0;
			long fnicTx = 0;
			long lnicRx = 0;
			long lnicTx = 0;
			if(StringUtils.isNotEmpty(fnic) && StringUtils.isNotEmpty(lnic)){
				fnicRx = Long.parseLong(fnic.split("/")[0]) ;
				fnicTx = Long.parseLong(fnic.split("/")[1]) ;
				lnicRx = Long.parseLong(lnic.split("/")[0]) ;
				lnicTx = Long.parseLong(lnic.split("/")[1]) ;
			}
			String tempUsage = (lnicRx - fnicRx) +"/"+ (lnicTx - fnicTx); 
			nicUsage.put(key, tempUsage);
		}
		
		
		result.setCpuUsageAvg( new Gson().toJson(cpuAvg) );
		result.setCpuUsagePeak( new Gson().toJson(cpuPeak) );
		result.setHddUsageAvg(totalHddUsage / list.size() );
		result.setHddUsagePeak(hddPeak);
		result.setMemUsageAvg(totalMemUsage / list.size() );
		result.setMemUsagePeak(memPeak);
		result.setNicUsage( new Gson().toJson(nicUsage) );
		
		return result;
	}

}
